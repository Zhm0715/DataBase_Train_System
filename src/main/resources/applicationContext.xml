<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context-4.3.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/context/spring-aop-4.3.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/context/spring-tx-4.3.xsd">

    <!-- 开启注解扫描-->
    <context:component-scan base-package="zhm.Train" />
    <context:component-scan base-package="zhm.Train.Service" />
    <context:component-scan base-package="zhm.Train.DAO" />
    <!-- spring整合mybatis -->
    <!-- 配置连接池 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="com.mysql.cj.jdbc.Driver" />
        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/Train?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf8" />
        <property name="user" value="root" />
        <property name="password" value="200715" />
<!--        <property name="autoCommitOnClose" value="false"></property>-->
    </bean>
    <!--         配置SessionFactor对象 -->
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="zhm.Train.DAO"></property>
    </bean>
    <!--    Redis-->
    <!--    <context:property-placeholder location="classpath:redis.properties" ignore-unresolvable="true"/>-->
    <!--    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">-->
    <!--        <property name="maxTotal" value="${redis.maxActive}"/>-->
    <!--        <property name="maxIdle" value="${redis.maxIdle}"/>-->
    <!--    </bean>-->
    <!--    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">-->
    <!--        <property name="hostName" value="${redis.host}"></property>-->
    <!--        <property name="port" value="${redis.port}"></property>-->
    <!--        <property name="poolConfig"  ref="poolConfig"></property>-->
    <!--    </bean>-->
    <!--    <bean>-->
    <!--        <property name="mapperLocations">-->
    <!--            <list>-->
    <!--                <value>classpath:zhm/core/Dao/**/*.xml</value>-->
    <!--            </list>-->
    <!--        </property>-->
    <!--    </bean>-->
    <!--        <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">-->
    <!--            <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactoryBean"/>-->
    <!--        </bean>-->

    <!--        <bean id="UserMapper" class="zhm.core.Dao.Imple.ManagerDaoImple">-->
    <!--            <property name="sqlSession" value="sqlSessionTemplate"/>-->
    <!--        </bean>-->
    <!--        <bean id="UserService" class="zhm.core.Service.Imple.ManagerServiceImple">-->
    <!--        </bean>-->
    <!-- 配置DAO所在包 -->
    <!--        <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
    <!--            <property name="basePackage" value="zhm.core.Dao" />-->
    <!--        </bean>-->
</beans>


        <!--        class	这个属性是强制性的，并且指定用来创建 bean 的 bean 类。-->
        <!--        name	这个属性指定唯一的 bean 标识符。在基于 XML 的配置元数据中，你可以使用 ID 和/或 name 属性来指定 bean 标识符。-->
        <!--        scope	这个属性指定由特定的 bean 定义创建的对象的作用域，它将会在 bean 作用域的章节中进行讨论。-->
        <!--        constructor-arg	它是用来注入依赖关系的，并会在接下来的章节中进行讨论。-->
        <!--        properties	它是用来注入依赖关系的，并会在接下来的章节中进行讨论。-->
        <!--        autowiring mode	它是用来注入依赖关系的，并会在接下来的章节中进行讨论。-->
        <!--        lazy-initialization mode	延迟初始化的 bean 告诉 IoC 容器在它第一次被请求时，而不是在启动时去创建一个 bean 实例。-->
        <!--        initialization 方法	在 bean 的所有必需的属性被容器设置之后，调用回调方法。-->
        <!--        destruction 方法	当包含该 bean 的容器被销毁时，使用回调方法。-->

        <!--根据id获取类 实现低耦合-->
        <!--<bean id="helloWorld" class="com.tutorialspoint.HelloWorld">-->
        <!--DI注入 依赖于set方法-->
        <!--<property name="message" value="Hello World!"/>-->
        <!--</bean>-->

        <!--生命周期 <bean id="helloWorld" class="com.tutorialspoint.HelloWorld" scope="singleton">-->
        <!--        singleton 在spring IoC容器仅存在一个Bean实例，Bean以单例方式存在，默认值-->
        <!--        prototype	每次从容器中调用Bean时，都返回一个新的实例，即每次调用getBean()时，相当于执行newXxxBean()-->
        <!--        request	每次HTTP请求都会创建一个新的Bean，该作用域仅适用于WebApplicationContext环境-->
        <!--        session	同一个HTTP Session共享一个Bean，不同Session使用不同的Bean，仅适用于WebApplicationContext环境-->
        <!--        global-session	一般用于Portlet应用环境，该作用域仅适用于WebApplicationContext环境-->

        <!--依赖注入-->
        <!--<bean id="spellChecker" class="com.SpellCheck"> 创建bean 也可以使用内部bean-->
        <!--<constructor-arg ref="spellChecker"/>   构造函数注入-->
        <!--<property name="spellChecker" ref="spellChecker"/>  set注入-->
        <!--<constructor-arg type="int" value="2001"/>-->

        <!--注解-->
        <!--        1	@Required-->
        <!--        @Required 注解应用于 bean 属性的 setter 方法。-->

        <!--        2	@Autowired-->
        <!--        @Autowired 注解可以应用到 bean 属性的 setter 方法，非 setter 方法，构造函数和属性。-->
        <!--        DI注入一个定义好的 bean 最常用-->
        <!--        3	@Qualifier-->
        <!--        通过指定确切的将被连线的 bean，@Autowired 和 @Qualifier 注解可以用来删除混乱。-->
        <!--        @Qualifier("student1") 注入id为student1的bean    -->
        <!--        4	JSR-250 Annotations-->
        <!--        Spring 支持 JSR-250 的基础的注解，其中包括了 @Resource，@PostConstruct 和 @PreDestroy 注解。-->
